""" 
  Script to generate a python dictionary with sample metadata. 
  Used for nanoAOD postproduction.
"""

# Import libraries
import os, re, sys
sys.path.append( os.path.join( os.environ["CMSSW_BASE"], "src/CMGTools/TTHAnalysis/python/plotter/wz-run3/"))
from cfgs.datasets_cfg import mcas, mcas_fr
from datetime import date
import numpy 
from optparse import OptionParser
from functions import color_msg

""" Some hardcoded configurations """
# These are the configurations need to run the postprocessor
kreators = {
  "data" : lambda args : '{name} = kreator.makeDataComponentFromLocal("{dname}", "", "{path}", "", ".*root", "{year}", [], json = json)'.format(**args),
  "mc"   : lambda args : '{name} = kreator.makeMCComponentFromLocal("{dname}", "", "{path}", ".*root", {xsec})'.format(**args),
}

# Name for the output file
prefix = "samples_13p6TeV_%s%s_nanoAODv12_fromLocal.py"

# Goldenjson to be used for data postprocessing.
goldenjson = "Cert_Collisions2022_355100_362760_Golden.json"

def add_parsing_opts():
  """ Function with base parsing arguments used by any script """
  parser = OptionParser(usage = "python wz-run.py [options]", 
                                 description = "Main options for running WZ analysis") 
  # -- Input and outputs
  parser.add_option("--isData", dest = "isData", default = False, action="store_true",
              help = "CFG is for data or MC?")
  parser.add_option("--version", dest = "version", default = 11, type = int,
              help = "NanoAOD version")
  parser.add_option("--analysis", dest = "analysis", default = "main", 
              help = "Main analysis or FR")
  parser.add_option("--year", dest = "year", default = "2022", 
              help = "Campaign year")
  parser.add_option("-v", "--verbose", dest = "verbose", default = 0, type = int, 
              help = "Level of verbosity")
  parser.add_option("-w", "--write-cfg", dest = "write_cfg", action = "store_true", default = False,
              help = "Write the files. Otherwise just print a summary.")
  return parser.parse_args()

def print_summary(mcas, year):
  for mcagroup, mcaitem in mcas.items():
    color_msg(" >> MCA: {}".format(mcagroup), "blue")
    for group, dsets in mcaitem.get_datasets().items():
        color_msg("   + Group: {}".format(group), "yellow")
        for dset in dsets:
            color_msg("     o Dataset: {}".format(dset.processname), "green")
            nanofiles, raw_nano = dset.get_pure_nanoaod(year if year != "2022EE" else "2022PostEE")
            if nanofiles != None:
              color_msg("     o NanoAOD is in: {}".format(nanofiles))
            else:
              color_msg("     o There is no nanoAOD for this in: {}".format(raw_nano), "red")

  return

if __name__ == "__main__":
  
  (opts, args) = add_parsing_opts()
  
  
  version = int(opts.version)
  type_ = "data" if opts.isData else "mc"
  year = opts.year
  analysis = opts.analysis
  verbosity = opts.verbose 
  write = opts.write_cfg

  # Start
  outname = os.path.join( os.environ["CMSSW_BASE"], "src/CMGTools/RootTools/python/samples/%s"%(prefix%(type_, year)))

  if analysis == "main":
    mcas_used = mcas
  elif analysis == "fr":
    mcas_used = mcas_fr
    outname = outname.replace("%s"%type_, "%sFR"%type_)

  if not opts.isData:
    mcas_used = { proc : mcas_used[proc] for proc in mcas_used if proc != "data"}
  else:
    mcas_used = { "data" : mcas_used["data"]}
    outname = outname.replace("mc", "data")

  
  
  color_msg(" Writing CFG: {}".format( outname ), "blue")
  
  print_summary(mcas_used, year)
  
  if write:
    # -- Now create the CFG
    if os.path.isfile(outname):
      os.system("cp %s %s"%(outname, outname + "."))

    f = open(outname, "w")
    f.write("#!/bin/env python3\n")
    f.write("# Config file for Run3 sample postprocessing\n")
    f.write("# File automatically generated by create_cfg.py script on %s [yyyy-mm-dd] -- EDIT AT YOUR OWN RISK\n"%(date.today()))

    f.write("from CMGTools.RootTools.samples.ComponentCreator import ComponentCreator\n")
    f.write("import os\n")
    f.write("kreator = ComponentCreator()\n")

    if type_ == "data": 
      f.write('json = os.environ["CMSSW_BASE"]+"/src/CMGTools/TTHAnalysis/cfg/%s"\n'%goldenjson)

    kreator = kreators[type_]
    wholelist = []
    for mcagroup, mcaitem in mcas_used.items():
      for group, dsets in mcaitem.get_datasets().items():
        f.write("# ------ Group: %s\n"%group)
        tolist = []
        for dset in dsets:
          dname = dset.processname
          if type_ == "data" and dset.year != year: continue
          f.write("#  + Process: %s \n"%dname)


          nanofiles, raw_nano = dset.get_pure_nanoaod(year if year != "2022EE" else "2022PostEE")
          if nanofiles == None: continue
          
          for ifold, fold in enumerate(nanofiles):
            if "ext" in fold: continue # Forget extensions
            name = dname + "_%d"%ifold
            if type_ == "mc":
              args = dict(name = name,
                          dname = dname,
                          path = fold,
                          xsec = dset.xsec)
            else:
              args = dict(name = name,
                          dname = dname,
                          path = fold,
                          year = dset.year)
            comp = kreator(args)
            f.write(comp+"\n")
            tolist.append(name)
        wholelist.append( group )
        f.write("%s = [%s]\n\n"%(group, ", ".join(tolist)))  
    f.write("\n\n\n%sSamples_list = %s\n"%(type_, " + ".join(wholelist)))
    f.write("%sSamples_toImport = %sSamples_list"%(type_, type_))
    f.close() 
        
    print("Files written") 
