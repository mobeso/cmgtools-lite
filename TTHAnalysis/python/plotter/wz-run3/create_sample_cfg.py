# -- Script to generate a python dictionary with sample metadata -- #

import os, re, sys
from cfgs.datasets import datasets_wz
from CMGTools.TTHAnalysis.tools.nanoAOD.xsec13p6TeV_cfg import xsecs13p6TeV_dict as xsecs
from datetime import date
import numpy 

paths = {
  "mc"   : "/pool/phedex/nanoAODv10/27sep2022/MC",
  "data" : "/pool/phedex/nanoAODv10/27sep2022/Data"
}

prefix = "samples_13p6TeV_%s2022_nanoAODv10_fromLocal.py"
year = 2022

kreators = {
 "data" : lambda args : "{name} = kreator.makeDataComponentFromLocal('{dname}', '', '{path}', '', '.*root', {year}, [], json = json)".format(**args),
 "mc"   : lambda args : "{name} = kreator.makeMCComponentFromLocal('{dname}', '', '{path}', '', '.*root', {xsec})".format(**args)
}

goldenjson = "Cert_Collisions2022_355100_357900_Golden.json"
class sample_group:
  def __init__(self):
    self.name    = ""
    self.mainpath = ""
    self.type_ = ""
    self.metadata = [] 
    return 
  
def match_samples(path, type_):
  ''' This function walks over folders until it finds a rootfile'''
  # -- First find the folders with rootfiles only
  folders = []
  for root, dirs, files in os.walk( path ):
    if "test" in root: continue
    are_there_rfiles = any([".root" in f for f in files])
    if not are_there_rfiles: continue
    folder = root.replace(path, "")
    folders.append(folder)
  samples = []
  for sampname, entries in datasets_wz[type_].iteritems():
    samp = sample_group()

    samp.name     = sampname
    samp.type_    = type_
    samp.mainpath = path

    xsec = None
    for metadata in entries:
      try:
        dname, regex, xsec = metadata
      except ValueError:
        dname, regex = metadata
      # -- Match from the list of samples
      match = re.compile(regex)
      matches = list(filter(match.match, folders))
      
      samp.metadata.append( (dname, matches, xsec ) )    
    samples.append(samp)
  return samples 

def print_summary(samples):
  # -- Now write stuff with this 
  print(" >> Summary")
  for s in samples:
    print("    - Sample: %s"%s.name)
    for subsample in s.metadata:
      print("      * Private name: %s"%subsample[0])
      print("      * files: %s"%subsample[1])
      if s.type_ != "data": # This metada is only available for MC
        print("      * xsec:   %s"%subsample[2])
      print("      ---------------------------------- ")
    print("    ==================================== ") 
  return

if __name__ == "__main__":
  for type_ in ["mc", "data"]: 
    samples = match_samples(paths[type_], type_)  
    #print_summary(samples) 

    # -- Now create the CFG
    outname = os.path.join( os.environ["CMSSW_BASE"], "src/CMGTools/RootTools/python/samples/%s"%(prefix%type_) ) 
    if os.path.isfile(outname):
      os.system("cp %s %s"%(outname, outname + ".bkp"))

    print("Creating file %s"%outname)
    f = open(outname, "w")
    f.write("# Config file for Run3 sample postprocessing\n")
    f.write("# File automatically generated by create_cfg.py script on %s [yyyy-m-d] -- EDIT AT YOUR OWN RISK\n"%(date.today()))
    f.write("from CMGTools.RootTools.samples.ComponentCreator import ComponentCreator\n")
    f.write("import os\n")
    f.write("kreator = ComponentCreator()\n")

    if type_ == "data": 
      f.write("json = '%s'\n"%goldenjson)
 

    wholelist = []
    
    for s in samples:
      kreator = kreators[type_]
      dname = s.name
      f.write("# ------ %s dataset\n"%dname)
      
      tolist = []
      for subsample in s.metadata:
        args = None
        
        for ifold, fold in enumerate(subsample[1]): 
          name = subsample[0].replace("-", "") +"_%d"%ifold  
          if type_ == "mc":
            args  = dict(name = name,
                         dname = subsample[0],
                         path = fold,
                         xsec = subsample[2])
          else:
            args = dict(name = name,
                        dname = subsample[0],
                        path = fold, 
                        year = year)
          comp = kreator(args)                
          f.write(comp+"\n")
          tolist.append(name)                 

      wholelist.append( dname )
      f.write("%s = [%s]\n\n"%(dname, ", ".join(tolist)))               

    f.write("\n\n\n%sSamples_list = %s\n"%(type_, " + ".join(wholelist)))
    f.write("%sSamples_toImport = %sSamples_list"%(type_, type_))
    
    f.close() 
       
  print("Filess written")
    
    
