""" 
  Script to generate a python dictionary with sample metadata. 
  Used for nanoAOD postproduction.
"""

# Import libraries
import os, re, sys
from datetime import date
import numpy 
from optparse import OptionParser
from cfgs.datasets_cfg import datasets as alldatasets
from functions import color_msg

""" Some hardcoded configurations """
# These are the configurations need to run the postprocessor
kreators = {
 "data" : lambda args : '{name} = kreator.makeDataComponentFromLocal("{dname}", "", "{path}", "", ".*root", "{year}", [], json = json)'.format(**args),
 "mc"   : lambda args : '{name} = kreator.makeMCComponentFromLocal("{dname}", "", "{path}", ".*root", {xsec})'.format(**args)
}

# Name for the output file
prefix = "samples_13p6TeV_%s%s_nanoAODv11_fromLocal.py"

# Goldenjson to be used for data postprocessing.
goldenjson = "Cert_Collisions2022_355100_362760_Golden.json"

def add_parsing_opts():
  """ Function with base parsing arguments used by any script """
  parser = OptionParser(usage = "python wz-run.py [options]", 
                                 description = "Main options for running WZ analysis") 
  # -- Input and outputs
  parser.add_option("--isData", dest = "isData", default = False, action="store_true",
              help = "CFG is for data or MC?")
  parser.add_option("--version", dest = "version", default = 11, type = int,
              help = "NanoAOD version")
  parser.add_option("--year", dest = "year", default = "2022", 
              help = "Campaign year")
  parser.add_option("-v", "--verbose", dest = "verbose", default = 0, type = int, 
              help = "Level of verbosity")
  parser.add_option("-w", "--write-cfg", dest = "write_cfg", action = "store_true", default = False,
              help = "Write the files. Otherwise just print a summary.")
  return parser.parse_args()


def print_summary(datasets, verbosity):
  # -- Now write stuff with this
  for samplegroup, samples in datasets.items():
      for samplename, sample in samples.items():
        color_msg(" >> Sample: %s"%samplename, "green")
        for subsample in sample:
          color_msg("      * Private name: %s"%subsample.name, "blue")
          if not subsample.isData: # This metada is only available for MC
            print(("        + xsec:   %s"%subsample.xsec))
          if verbosity > 1:
            folder, _= subsample.get_pure_nanoaod()
            print(("        + files: %s"%folder[0]))
  return

if __name__ == "__main__":
  
  (opts, args) = add_parsing_opts()
  
  
  version = int(opts.version)
  type_ = "data" if opts.isData else "mc"
  year = opts.year
  verbosity = opts.verbose 
  write = opts.write_cfg
  
  datasets = alldatasets[type_]
  print_summary(datasets, verbosity)
  if write:
    # -- Now create the CFG
    outname = os.path.join( os.environ["CMSSW_BASE"], "src/CMGTools/RootTools/python/samples/%s"%(prefix%(type_, year)) ) 
    if os.path.isfile(outname):
      os.system("cp %s %s"%(outname, outname + "."))

    print(("Creating file %s"%outname))
    f = open(outname, "w")
    f.write("#!/bin/env python3\n")
    f.write("# Config file for Run3 sample postprocessing\n")
    f.write("# File automatically generated by create_cfg.py script on %s [yyyy-mm-dd] -- EDIT AT YOUR OWN RISK\n"%(date.today()))

    f.write("from CMGTools.RootTools.samples.ComponentCreator import ComponentCreator\n")
    f.write("import os\n")
    f.write("kreator = ComponentCreator()\n")

    if type_ == "data": 
      f.write('json = os.environ["CMSSW_BASE"]+"/src/CMGTools/TTHAnalysis/cfg/%s"\n'%goldenjson)


    wholelist = []
    
    for samplegroup, samples in datasets.items():
        for samplename, sample in samples.items():
            kreator = kreators[type_]
            dname = samplename
            f.write("# ------ %s dataset\n"%dname)

            tolist = []
            for subsample in sample:
                args = None
                folders, dataset_path = subsample.get_pure_nanoaod()
                for ifold, fold in enumerate(folders): 
                  name = subsample.name.replace("-", "") +"_%d"%ifold  
                  if type_ == "mc":
                    args  = dict(name = name,
                                dname = subsample.name,
                                path = os.path.join(dataset_path, fold ),
                                xsec = subsample.xsec)
                  else:
                    args = dict(name = name,
                                dname = subsample.name,
                                path = os.path.join(dataset_path, fold ),
                                year = subsample.year)
                  comp = kreator(args)                
                  f.write(comp+"\n")
                  tolist.append(name)                 

            wholelist.append( dname )
            f.write("%s = [%s]\n\n"%(dname, ", ".join(tolist)))               

    f.write("\n\n\n%sSamples_list = %s\n"%(type_, " + ".join(wholelist)))
    f.write("%sSamples_toImport = %sSamples_list"%(type_, type_))
    f.close() 
        
    print("Files written")
      
      
    
